<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>刷爆leetcode：动态规划</title>
      <link href="/2023/04/17/leetcode/dong-tai-gui-hua/"/>
      <url>/2023/04/17/leetcode/dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="1-动态规划-Dynamic-Programming"><a href="#1-动态规划-Dynamic-Programming" class="headerlink" title="1 动态规划(Dynamic Programming)"></a>1 动态规划(Dynamic Programming)</h3><h4 id="1-1-基本实现思想"><a href="#1-1-基本实现思想" class="headerlink" title="1.1 基本实现思想"></a>1.1 基本实现思想</h4><blockquote><p>参考自：<a href="https://labuladong.gitee.io/algo/1/4/">https://labuladong.gitee.io/algo/1/4/</a></p></blockquote><p><code>首先，动态规划问题的一般形式就是求最值</code>。动态规划其实是运筹学的一种最优化方法，只不过在计算机问题上应用比较多，比如说让你求最长递增子序列呀，最小编辑距离呀等等。</p><p>既然是要求最值，核心问题是什么呢？<code>求解动态规划的核心问题是穷举</code>。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值呗。</p><p>动态规划这么简单，就是穷举就完事了？我看到的动态规划问题都很难啊！</p><p>首先，动态规划的穷举有点特别，因为这类问题<code>存在「重叠子问题」</code>，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。</p><p>而且，动态规划问题一定会<code>具备「最优子结构」</code>，才能通过子问题的最值得到原问题的最值。</p><p>另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出<code>正确的「状态转移方程」</code>，才能正确地穷举。</p><p>以上提到的重叠子问题、最优子结构、状态转移方程就是动态规划三要素。具体什么意思等会会举例详解，但是在实际的算法问题中，<code>写出状态转移方程是最困难的</code>，这也就是为什么很多朋友觉得动态规划问题困难的原因，我来提供我研究出来的一个思维框架，辅助你思考状态转移方程：</p><p><code>明确 base case -&gt; 明确「状态」-&gt; 明确「选择」 -&gt; 定义 dp 数组/函数的含义。</code></p><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><h3 id="1-斐波那契数列"><a href="#1-斐波那契数列" class="headerlink" title="1 斐波那契数列"></a>1 斐波那契数列</h3><h4 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a>70. 爬楼梯</h4><p><a href="https://leetcode-cn.com/problems/climbing-stairs/description/">leetcode</a></p><p>难度: <code>简单</code></p><p>简单DP，开胃菜，不多说。</p><blockquote><p>输入：n &#x3D; 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。</p></blockquote><ol><li>1 阶 + 1 阶</li><li>2 阶</li></ol><h5 id="DP解法"><a href="#DP解法" class="headerlink" title="DP解法"></a>DP解法</h5><p><strong>dp[i] &#x3D; dp[i-1] + dp[i-2]</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token operator">+</span>c        <span class="token keyword">return</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a>198. 打家劫舍</h4><p><a href="https://leetcode-cn.com/problems/house-robber/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>简单DP的小进阶。</p><blockquote><p>输入：[1,2,3,1]<br>输出：4<br>解释：偷窃 1 号房屋 (金额 &#x3D; 1) ，然后偷窃 3 号房屋 (金额 &#x3D; 3)。<br>     偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。</p></blockquote><h5 id="DP解法-1"><a href="#DP解法-1" class="headerlink" title="DP解法"></a>DP解法</h5><p>dp[i] &#x3D; max(dp[i-2] + nums[i], dp[i-1])</p><p>[1,2,3,1]<br>[1]<br>[1,2]<br>[1,2,4]<br>[1,2,4,4]</p><p>[4,1,2,4]<br>[4]<br>[4,4]<br>[4,4,6]<br>[4,4,6,8]</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            c <span class="token operator">=</span> max<span class="token punctuation">(</span>a <span class="token operator">+</span> n<span class="token punctuation">,</span> b<span class="token punctuation">)</span>            a <span class="token operator">=</span> b            b <span class="token operator">=</span> c        <span class="token keyword">return</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213. 打家劫舍 II"></a>213. 打家劫舍 II</h4><p><a href="https://leetcode-cn.com/problems/house-robber-ii/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>这题是上一题的进阶版，有一定思考上的难度，第一个和最后一个房间不能同时偷，其实就是一个环。<br>如何将这个特殊的问题一般化呢？其实很简单，拆成俩个普通的队列就行了。</p><blockquote><p>输入：nums &#x3D; [2,3,2]<br>输出：3<br>解释：你不能先偷窃 1 号房屋（金额 &#x3D; 2），然后偷窃 3 号房屋（金额 &#x3D; 2）, 因为他们是相邻的。</p></blockquote><h5 id="DP解法-2"><a href="#DP解法-2" class="headerlink" title="DP解法"></a>DP解法</h5><p><strong>dp[i] &#x3D; dp[i-1] + dp[i-2]</strong><br>分成两个队列，如<br>p :[1,2,3,4,5,6,7] &#x3D;<br>p1:[1,2,3,4,5,6] +<br>p2:  [2,3,4,5,6,7]<br><strong>p1&#x3D;max(p1,p2)</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        l <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> l <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>         <span class="token keyword">def</span> <span class="token function">robson</span><span class="token punctuation">(</span>start<span class="token punctuation">:</span> int<span class="token punctuation">,</span> end<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>            numsson <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span>            a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>            <span class="token keyword">for</span> n <span class="token keyword">in</span> numsson<span class="token punctuation">:</span>                c <span class="token operator">=</span> max<span class="token punctuation">(</span>a<span class="token operator">+</span>n<span class="token punctuation">,</span> b<span class="token punctuation">)</span>                a <span class="token operator">=</span> b                b <span class="token operator">=</span> c            <span class="token keyword">return</span> c        <span class="token keyword">return</span> max<span class="token punctuation">(</span>robson<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> l<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> robson<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-矩阵路径"><a href="#2-矩阵路径" class="headerlink" title="2 矩阵路径"></a>2 矩阵路径</h3><h4 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64. 最小路径和"></a>64. 最小路径和</h4><p><a href="https://leetcode-cn.com/problems/minimum-path-sum/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>很简单的一种题型。</p><img src="/2023/04/17/leetcode/dong-tai-gui-hua/1.jpg" class="" title="题目示例图"><blockquote><p>输入：grid &#x3D; [[1,3,1],[1,5,1],[4,2,1]]<br>输出：7<br>解释：因为路径 1→3→1→1→1 的总和最小。</p></blockquote><h5 id="DP解法-3"><a href="#DP解法-3" class="headerlink" title="DP解法"></a>DP解法</h5><p><strong>dp[i][j] +&#x3D; max(dp[i-1][j], dp[i][j-1])</strong><br>note：<code>第1行&amp;第1列要特殊处理</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token punctuation">,</span> m <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>            grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>                grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> min<span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> grid<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a>62. 不同路径</h4><p><a href="https://leetcode-cn.com/problems/unique-paths/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>增加信心题！</p><img src="/2023/04/17/leetcode/dong-tai-gui-hua/2.png" class="" title="题目示例图"><blockquote><p>输入：m &#x3D; 3, n &#x3D; 7<br>输出：28</p></blockquote><h5 id="DP解法-4"><a href="#DP解法-4" class="headerlink" title="DP解法"></a>DP解法</h5><p><strong>dp[i][j] &#x3D; dp[i-1][j] + dp[i][j-1]</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        grid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token operator">*</span>m        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> grid<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数组区间"><a href="#3-数组区间" class="headerlink" title="3 数组区间"></a>3 数组区间</h3><h4 id="303-区域和检索-数组不可变"><a href="#303-区域和检索-数组不可变" class="headerlink" title="303. 区域和检索 - 数组不可变"></a>303. 区域和检索 - 数组不可变</h4><p><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/description/">leetcode</a></p><p>难度: <code>简单</code></p><p>前缀和，勿暴力。    </p><blockquote><p>输入：<br>[“NumArray”, “sumRange”, “sumRange”, “sumRange”]<br>[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]<br>输出：<br>[null, 1, -1, -3]<br>解释：<br>NumArray numArray &#x3D; new NumArray([-2, 0, 3, -5, 2, -1]);<br>numArray.sumRange(0, 2); &#x2F;&#x2F; return 1 ((-2) + 0 + 3)<br>numArray.sumRange(2, 5); &#x2F;&#x2F; return -1 (3 + (-5) + 2 + (-1))<br>numArray.sumRange(0, 5); &#x2F;&#x2F; return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))</p></blockquote><h5 id="DP解法-5"><a href="#DP解法-5" class="headerlink" title="DP解法"></a>DP解法</h5><p>这里明显是前缀和解法。说明中提到<code>会多次调用sumRange方法</code>，所以不能直接暴力求解。</p><img src="/2023/04/17/leetcode/dong-tai-gui-hua/3.png" class="" title="题解示例图"><p><strong>sumRange &#x3D; dp[j+1] + dp[i]</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NumArray</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>sums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>sums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sumRange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">:</span> int<span class="token punctuation">,</span> j<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>sums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="413-等差数列划分"><a href="#413-等差数列划分" class="headerlink" title="413. 等差数列划分"></a>413. 等差数列划分</h4><p><a href="https://leetcode-cn.com/problems/arithmetic-slices/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>基础题！</p><!-- <img src="/2023/04/17/leetcode/dong-tai-gui-hua/2.png" class="" title="题目示例图"> --><blockquote><p>输入：nums &#x3D; [1,2,3,4]<br>输出：3<br>解释：nums 中有三个子等差数组：[1, 2, 3]、[2, 3, 4] 和 [1,2,3,4] 自身。</p></blockquote><h5 id="DP解法-6"><a href="#DP解法-6" class="headerlink" title="DP解法"></a>DP解法</h5><p>简单如斯。</p><p>[0,1,2,3,4,5]<br>1       [0,1,2]<br>2       [1,2,3][0,1,2,3]<br>3       [2,3,4][1,2,3,4][0,1,2,3,4]<br>4       [3,4,5][2,3,4,5][1,2,3,4,5][0,1,2,3,4,5]<br>tot &#x3D; 1+2+3+4&#x3D;10</p><p><strong>dp[i] &#x3D; dp[i-1] + 1</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numberOfArithmeticSlices</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                cnt <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-分割整数"><a href="#4-分割整数" class="headerlink" title="4 分割整数"></a>4 分割整数</h3><h4 id="343-整数拆分"><a href="#343-整数拆分" class="headerlink" title="343. 整数拆分"></a>343. 整数拆分</h4><p><a href="https://leetcode-cn.com/problems/integer-break/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>说实话这种题真的令人伤脑筋哦……</p><blockquote><p>输入: n &#x3D; 2<br>输出: 1<br>解释: 2 &#x3D; 1 + 1, 1 × 1 &#x3D; 1。</p></blockquote><h5 id="DP解法-7"><a href="#DP解法-7" class="headerlink" title="DP解法"></a>DP解法</h5><p><strong>确定状态转移方程</strong><br>当 i ≥ 2 时，有以下两种方案：<br>将 i 拆分成 j 和 i-j 的和，且 i−j 不再拆分成多个正整数，此时的乘积是 j×(i−j) ；<br>将 i 拆分成 j 和 i−j 的和，且 i−j 继续拆分成多个正整数，此时的乘积是 j×dp[i−j] 。<br>因此，当 j 固定时，有 dp[i]&#x3D;max(j×(i−j),j×dp[i−j])。由于 j 的取值范围是 1 到 i−1 ，需要遍历所有的 j 得到dp[i]</p><p>–&gt;  0, 0, 1, 2, 4, 6, 9, 12, 18, 27, 36, 54, 81</p><p><strong>dp[i] &#x3D; max(dp[i], max(j*(i-j), j*dp[i-j]))</strong></p><blockquote><p>优化的状态转移方程：<br>dp[i]&#x3D;max(2×(i−2),2×dp[i−2],3×(i−3),3×dp[i−3])<br>太难推导了，放弃吧，siunian！</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>         dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a>279. 完全平方数</h4><p><a href="https://leetcode-cn.com/problems/perfect-squares/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>这题之前做过，重做一遍吧！</p><blockquote><p>输入：n &#x3D; 12<br>输出：3<br>解释：12 &#x3D; 4 + 4 + 4</p></blockquote><h5 id="DP解法-8"><a href="#DP解法-8" class="headerlink" title="DP解法"></a>DP解法</h5><p>1 2 3 4 5 6 7 8 9 10 11 12 13<br>1 2 3 1 2 3 4 2 1 2  3  3  2<br>^     ^         ^<br>1     2         3</p><p>12 &#x3D; 1 + 11 &#x3D; (1) + 11<br>12 &#x3D; 2 + 10 &#x3D; (1 + 1) + 10<br>12 &#x3D; 3 + 9 &#x3D; (1 + 1 + 1) + 9<br>12 &#x3D; 4 + 8 &#x3D; (4) + 8<br>12 &#x3D; 5 + 7 &#x3D; (4 + 1) + 7<br>12 &#x3D; 6 + 6 &#x3D; (4 + 1 + 1) + 6<br>12 &#x3D; 7 + 5 &#x3D; (4 + 1 + 1 + 1) + 5<br>12 &#x3D; 8 + 4 &#x3D; (4 + 4) + 4<br>12 &#x3D; 9 + 3 &#x3D; (9) + 3<br>12 &#x3D; 10 + 2 &#x3D; (9 + 1) + 2<br>12 &#x3D; 11 + 1 &#x3D; (9 + 1 + 1) + 1</p><p>可以看到，12要么以1为基础，要么以4为基础，要么以9为基础，分别对应1，2，3的平方。<br>当然，这里的基础为大基础，具体还可以向下细分。</p><p>12 &#x3D; 1 + 11 –&gt; 1 + 3 &#x3D; 4<br>12 &#x3D; 4 + 8  –&gt; 1 + 2 &#x3D; 3 (min)<br>12 &#x3D; 9 + 3  –&gt; 1 + 3 &#x3D; 4</p><p>综合就这三种情况了，看看哪个小就行了，这个是不固定的。</p><p>yy &#x3D; [1, 2, 3]</p><p><strong>dp[x] &#x3D; min(dp[x], 1+dp[x-yy*yy])</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numSquares</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>        y <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> y<span class="token operator">*</span>y<span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                y <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> x                <span class="token keyword">for</span> yy <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>x<span class="token operator">-</span>yy<span class="token operator">*</span>yy<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91. 解码方法"></a>91. 解码方法</h4><p><a href="https://leetcode-cn.com/problems/decode-ways/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>这题我觉得应该先处理数字，然后再将数字转化成对应的字母。</p><blockquote><p>输入：s &#x3D; “226”<br>输出：3<br>解释：它可以解码为 “BZ” (2 26), “VF” (22 6), 或者 “BBF” (2 2 6) 。</p></blockquote><h5 id="DP解法-9"><a href="#DP解法-9" class="headerlink" title="DP解法"></a>DP解法</h5><p>做个测试<br><strong>2261</strong></p><ul><li>2</li><li>2 2 &#x2F; 22</li><li>2 2 6 &#x2F; 22 6 &#x2F; 2 26</li><li>2 2 6 1 &#x2F; 2 2 61 &#x2F; 22 6 1 &#x2F; 22 61 &#x2F; 2 26 1<br>可以发现，每一层都是上一层的演化<br>dp[226] &#x3D; dp[22] + 6<br>😘 &amp;rarr; 2 2 + 6 &#x3D; 2 2 6 &#x2F; 2 26<br>😘 &amp;rarr; 22 + 6 &#x3D; 22 6<br>又如：22 6 + 6 &#x3D; 22 6 6 &#x2F; 22 66(当然这里66不应该出现)<br>总之就是a b + c &#x3D; a b c &#x2F; a bc<br>要考虑最后一位是否可以与+的数组合。<br>2 2 &#x2F; 22 –&gt; [[“2”,”2”],[“22”]]<br>6 –&gt; “6”</li></ul><p>emmmmmmmmm 这样确实可行, 但是…复杂度太高了, 有O(n^2)了吧!!</p><p>还是看官方题解吧…</p><img src="/2023/04/17/leetcode/dong-tai-gui-hua/4.png" class="" title="别人的思路"><p>官方的思路:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span><span class="token punctuation">:</span>    可以单独进行解码<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    如<span class="token punctuation">:</span> <span class="token number">12</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">12</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"12"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>        <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"3"</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token string">"12"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"3"</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"12"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span><span class="token operator">and</span> s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">:</span>    可以和前面一位组合起来进行解码<span class="token punctuation">(</span><span class="token number">2</span>位<span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>    如<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">12</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"12"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>        <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"23"</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"23"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span> <span class="token operator">and</span> int<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-最长递增子序列"><a href="#5-最长递增子序列" class="headerlink" title="5 最长递增子序列"></a>5 最长递增子序列</h3><h4 id="300-最长递增子序列"><a href="#300-最长递增子序列" class="headerlink" title="300. 最长递增子序列"></a>300. 最长递增子序列</h4><p><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>dp的经典题型。</p><blockquote><p>输入：nums &#x3D; [10,9,2,5,3,7,101,18]<br>输出：4<br>解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</p></blockquote><h5 id="DP解法-10"><a href="#DP解法-10" class="headerlink" title="DP解法"></a>DP解法</h5><p>先状态设计思想：依然着眼于某个上升子序列的 结尾的元素，如果 已经得到的上升子序列的结尾的数越小，那么遍历的时候后面接上一个数，会有更大的可能构成一个长度更长的上升子序列。既然结尾越小越好，我们可以记录 在长度固定的情况下，结尾最小的那个元素的数值，这样定义以后容易得到「状态转移方程」。</p><p>为了与「方法二」的状态定义区分，将状态数组命名为 tail。</p><img src="/2023/04/17/leetcode/dong-tai-gui-hua/5.png" class="" title="题解示意"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> size <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> size        tail <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> tail<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                tail<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            left <span class="token operator">=</span> <span class="token number">0</span>            right <span class="token operator">=</span> len<span class="token punctuation">(</span>tail<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>                <span class="token keyword">if</span> tail<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid            tail<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="646-最长数对链"><a href="#646-最长数对链" class="headerlink" title="646. 最长数对链"></a>646. 最长数对链</h4><p><a href="https://leetcode-cn.com/problems/maximum-length-of-pair-chain/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>最长递增子序列的变种。</p><blockquote><p>输入：[[1,2], [2,3], [3,4]]<br>输出：2<br>解释：最长的数对链是 [1,2] -&gt; [3,4]</p></blockquote><h5 id="DP解法-11"><a href="#DP解法-11" class="headerlink" title="DP解法"></a>DP解法</h5><p>&lt;&lt; Holding Out For A Hero – HITAK &gt;&gt;</p><p>这题比较怪异，用dp做属实不明智，贪心yyds。</p><p>先说dp吧，dp的话做法就和上一题一样，但是上一题要求的是上升子序列，有顺序的，从前往后，但这一题其实并不要求顺序，可以随意连接，所以我们需要先排个序。<br>（所以说既然都排序了，那为什么不直接用贪心，矮，就是玩~）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">findLongestChain</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pairs<span class="token punctuation">)</span><span class="token punctuation">:</span>        pairs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> pairs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="贪心解法"><a href="#贪心解法" class="headerlink" title="贪心解法"></a>贪心解法</h5><p>&lt;&lt; Holding Out For A Hero – HITAK &gt;&gt; zhenhaoting</p><p>所以说还是用贪心吧，做法就是会议问题，按结尾时间排序，力求参与更多数量的会议。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLongestChain</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pairs<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        pairs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> c<span class="token punctuation">:</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        tmp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x3f3f3f3f</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">:</span>                tmp <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                cnt <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376. 摆动序列"></a>376. 摆动序列</h4><p><a href="https://leetcode-cn.com/problems/wiggle-subsequence/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>dp的经典题型，上上题的变种问题。</p><p>这题做出了还是很简单的，但是只能超过10%…大无语，所以还是很难的，毕竟官方题解看起来很装逼…</p><blockquote><p>输入：nums &#x3D; [1,7,4,9,2,5]<br>输出：6<br>解释：整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。</p></blockquote><h5 id="虚假的DP解法"><a href="#虚假的DP解法" class="headerlink" title="虚假的DP解法"></a>虚假的DP解法</h5><p>自己瞎写的，勉强过了，说是dp，其实我感觉像是暴力。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> size <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> size        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>size        st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>size        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        mx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">and</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            mx <span class="token operator">=</span> max<span class="token punctuation">(</span>mx<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> mx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="真正的DP解法"><a href="#真正的DP解法" class="headerlink" title="真正的DP解法"></a>真正的DP解法</h5><p>[1,17,5,10,13,15,10,5,16,8]<br>17 1 up &#x3D; down1 + 1 &#x3D; 2<br>5 1 up down &#x3D; up17 + 1 &#x3D; 3<br>10 1 up down up &#x3D; down5 + 1 &#x3D; 4<br>13 1 up down up up &#x3D; down5 + 1 &#x3D; 4<br>15 1 up down up up up &#x3D; down5 + 1 &#x3D; 4<br>10 1 up down up up up down &#x3D; up15 + 1 &#x3D; 5<br>5 1 up down up up up down down &#x3D; up15 + 1 &#x3D; 5<br>16 1 up down up up up down down up &#x3D; down5 + 1 &#x3D; 6<br>8 1 up down up up up down down up down &#x3D; up16 + 1 &#x3D; 7 </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> n                up <span class="token operator">=</span> down <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                up <span class="token operator">=</span> down <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                down <span class="token operator">=</span> up <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">return</span> max<span class="token punctuation">(</span>up<span class="token punctuation">,</span> down<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-最长公共子序列"><a href="#6-最长公共子序列" class="headerlink" title="6 最长公共子序列"></a>6 最长公共子序列</h3><h4 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a>1143. 最长公共子序列</h4><p><a href="https://leetcode-cn.com/problems/longest-common-subsequence/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>dp的经典题型。</p><blockquote><p>输入：text1 &#x3D; “abcde”, text2 &#x3D; “ace”<br>输出：3<br>解释：最长公共子序列是 “ace” ，它的长度为 3 。</p></blockquote><h5 id="DP解法-12"><a href="#DP解法-12" class="headerlink" title="DP解法"></a>DP解法</h5><p>ok, 这题以前就没搞明白，这次彻底搞懂了！<br>举个例子吧！<br>对于ace和babcde两个字符串，我们需要定义一个二维的dp数组，其中dp[i][j]可以理解为i和j分别是指向两个字符串的指针，代表当期子串的位置。<br>比如dp[2][3]表示，ac和bab（dp数组中每个字符串前面填充一个’#’，默认第1行和第1列都为0）<br>dp[1][1]: a + b : #a + #b &#x3D; max(#a + #, # + #b) &#x3D; 0 ()<br>dp[1][2]: a + a : #a + #ba &#x3D; (# + #b) + 1 &#x3D; 1 (前面的两个字串的最长公共序列+1)<br>dp[1][3]: a + b : #a + #bab &#x3D; max(# + #bab, #a + #ba) &#x3D; max(0, 1) &#x3D; 1<br>···<br>dp[3][6]: ··· &#x3D; 3</p><p>具体dp数组如下所示：</p><img src="/2023/04/17/leetcode/dong-tai-gui-hua/6.png" class="" title="题解示意"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text1<span class="token punctuation">:</span> str<span class="token punctuation">,</span> text2<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>text2<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># dp = [[0] * (n + 1)] * (m + 1) #错误用法，这样会导致每一行地址都一样</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>        text1 <span class="token operator">=</span> <span class="token string">"#"</span> <span class="token operator">+</span> text1        text2 <span class="token operator">=</span> <span class="token string">"#"</span> <span class="token operator">+</span> text2        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现一些自己的误区–关于定义二维数组<br>正确：dp &#x3D; [[0] * (n + 1) for _ in range(m + 1)]<br>错误：dp &#x3D; [[0] * (n + 1)] * (m + 1) #错误用法，这样会导致每一行地址都一样</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>output<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-背包问题"><a href="#7-背包问题" class="headerlink" title="7 背包问题"></a>7 背包问题</h3><h4 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a>416. 分割等和子集</h4><p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>这种题应该考虑动态规划，但是需要对问题进行小小的简化。</p><blockquote><p>输入：nums &#x3D; [1,5,11,5]<br>输出：true<br>解释：数组可以分割成 [1, 5, 5] 和 [11] 。</p></blockquote><h5 id="DP解法（0-1背包）"><a href="#DP解法（0-1背包）" class="headerlink" title="DP解法（0-1背包）"></a>DP解法（0-1背包）</h5><p>ok, 如何简化问题呢？<br>分成两个相等的子集其实可以理解为：sumson &#x3D; sumall &#x2F; 2<br>如：1+5+11+5&#x3D;22<br>那我们只需要找到一个总和为11的子集就可以了。<br>| | | |</p><img src="/2023/04/17/leetcode/dong-tai-gui-hua/6.png" class="" title="题解示意"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canPartition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> size <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        sumall <span class="token operator">=</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> sumall <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        sumson <span class="token operator">=</span> int<span class="token punctuation">(</span>sumall <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sumson<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">></span> sumson<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> sumson<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sumson<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>sumson<span class="token punctuation">]</span> <span class="token operator">==</span> sumson<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494. 目标和"></a>494. 目标和</h4><p><a href="https://leetcode-cn.com/problems/target-sum/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>这题第一感觉是直接暴力dfs，当然得用回溯剪枝，要不铁定超时。</p><blockquote><p>输入：nums &#x3D; [1,1,1,1,1], target &#x3D; 3<br>输出：5<br>解释：一共有 5 种方法让最终目标和为 3 。<br>-1 + 1 + 1 + 1 + 1 &#x3D; 3<br>+1 - 1 + 1 + 1 + 1 &#x3D; 3<br>+1 + 1 - 1 + 1 + 1 &#x3D; 3<br>+1 + 1 + 1 - 1 + 1 &#x3D; 3<br>+1 + 1 + 1 + 1 - 1 &#x3D; 3</p></blockquote><h5 id="DFS解法"><a href="#DFS解法" class="headerlink" title="DFS解法"></a>DFS解法</h5><p>随便举个例子，假设：<br>nums &#x3D; [3, 2, 1]<br>target &#x3D; 6<br>那么题解过程如下图所示，    </p><img src="/2023/04/17/leetcode/dong-tai-gui-hua/7.jpg" class="" title="题解示意"><p>需要注意的是，cache是用来持久化的，也是为了回溯和剪枝，具体的就是上图中的(step, sum) &#x3D; cntA + cntB<br><code>回溯</code>一般是用于排列组合，而不是寻找某一特定目标。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        cache <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>step<span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token keyword">in</span> cache<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果已经再cache内了</span>                <span class="token keyword">return</span> cache<span class="token punctuation">[</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> step <span class="token operator">==</span> size<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果到头了</span>                <span class="token keyword">if</span> sum <span class="token operator">==</span> target<span class="token punctuation">:</span>                    cache<span class="token punctuation">[</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    cache<span class="token punctuation">[</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">return</span> cache<span class="token punctuation">[</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">]</span>            cntA <span class="token operator">=</span> dfs<span class="token punctuation">(</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token operator">+</span>nums<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span>            cntB <span class="token operator">=</span> dfs<span class="token punctuation">(</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token operator">-</span>nums<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> cntA <span class="token operator">+</span> cntB            <span class="token keyword">return</span> cache<span class="token punctuation">[</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">]</span>        cnt <span class="token operator">=</span> dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="DP解法（0-1背包）-1"><a href="#DP解法（0-1背包）-1" class="headerlink" title="DP解法（0-1背包）"></a>DP解法（0-1背包）</h5><p>说实话，这题正常人也看不出来是个动态规划吧，但其实如果和上一题连在一起做的话，或许会有一些思路。<br>也就是说，这题也是需要将问题进行一定的转化。<br>记数组的元素和为sum，添加’-‘号的元素之和为neg，则其余添加’+’的元素之和为sum−neg，得到的表达式的结果为:<br>(sum−neg)−neg&#x3D;sum−2⋅neg&#x3D;target<br>+1-2-3+6中，neg&#x3D;2+3&#x3D;5, sum-neg&#x3D;1+6&#x3D;1+2+3+6-5&#x3D;7<br>(+)sum-neg&#x3D;(+)7<br>(-)neg&#x3D;(-)5<br>target&#x3D;(sum-neg)-neg<br>neg&#x3D;(sum-target)&#x2F;2</p><p>问题出来了——从数组中选中若干个数，让它们之和等于neg(给它们加上’-‘号)<br>阿哲，就不是0-1背包问题了吗？？？<br>干他！！！</p><p>呜呜呜，竟然不会写代码。</p><img src="/2023/04/17/leetcode/dong-tai-gui-hua/88.png" class="" title="题解示意"><img src="/2023/04/17/leetcode/dong-tai-gui-hua/8.png" class="" title="题解示意"><p><code>注意</code>：状态转移方程dp[i][j] &#x3D; dp[i-1][j] + dp[i-1][j-nums[i-1]]<br>                       不考虑this的组合数       考虑this的组合数<br>                                             &#x3D; 删掉this大小的组合数<br>this指当前num</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        summ <span class="token operator">=</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> summ <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>summ <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">%</span>  <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        neg <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span>target<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>neg<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> neg<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">[</span>neg<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="474-一和零"><a href="#474-一和零" class="headerlink" title="474. 一和零"></a>474. 一和零</h4><p><a href="https://leetcode-cn.com/problems/ones-and-zeroes/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>这题是三维的0-1背包问题，第一次做真的不容易啊，因为三维的没法画表格···<br>总之这题受益匪浅</p><blockquote><p>输入：strs &#x3D; [“10”, “0001”, “111001”, “1”, “0”], m &#x3D; 5, n &#x3D; 3<br>输出：4<br>解释：最多有 5 个 0 和 3 个 1 的最大子集是 {“10”,”0001”,”1”,”0”} ，因此答案是 4 。<br>其他满足题意但较小的子集包括 {“0001”,”1”} 和 {“10”,”1”,”0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</p></blockquote><h5 id="DP解法（0-1背包）-2"><a href="#DP解法（0-1背包）-2" class="headerlink" title="DP解法（0-1背包）"></a>DP解法（0-1背包）</h5><p>考虑这题可以首先进行降维思考，我们不同时考虑0和1，就假设只有一个元素，这样就可以把他当成一个普通的0-1背包问题了。<br>本题要求的是<code>最多可以在背包里放几个（放满）</code>，那么如何选择呢？<br>无非是多一步统计’0’和’1’，然后给dp数组加一维。<br>一般是 dp[i][j] &#x3D; max(dp[i-1][j], dp[i-1][j-zero]+1)<br>这里变成 dp[i][j][k] &#x3D; max(dp[i-1][j][k], dp[i-1][j-zero][k-one]+1)</p><p>首先尝试用三维做一下，如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMaxForm</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            zero <span class="token operator">=</span> strs<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>            one <span class="token operator">=</span> len<span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>zero            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>                    <span class="token keyword">if</span> j <span class="token operator">>=</span> zero <span class="token operator">and</span> k <span class="token operator">>=</span> one<span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>zero<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>one<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然但是三维太浪费空间，同时也浪费一定时间，所以可以进行空间优化。<br>这里可以使用滚动数组的方式，省略i这一维，但是j和k的内层循环需采用倒序遍历的方式，因为dp[j-zero][k-one]需要考虑dp[j][k]前面的数组元素，不能让前面的先被修改，应该先修改后面的元素。<br>同时循环遍历范围应该是range(m, zero-1, -1)和range(n, one-1, -1)，因为除此之外的范围都是保持不变的，在三维中是dp[i][j][k] &#x3D; dp[i-1][j][k]，在二维中是dp[j][k] &#x3D; dp[j][k]。<br>代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMaxForm</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> str <span class="token keyword">in</span> strs<span class="token punctuation">:</span>            zero <span class="token operator">=</span> str<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>            one <span class="token operator">=</span> len<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span>zero            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">,</span> zero<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">,</span> one<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>zero<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>one<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a>322. 零钱兑换</h4><p><a href="https://leetcode-cn.com/problems/coin-change/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>好像做过，是0-1背包还是完全背包呢？当然是完全背包啦，毕竟一样东西可以无限的放取。</p><blockquote><p>输入：coins &#x3D; [1, 2, 5], amount &#x3D; 11<br>输出：3<br>解释：11 &#x3D; 5 + 5 + 1</p></blockquote><h5 id="DP解法（完全背包）"><a href="#DP解法（完全背包）" class="headerlink" title="DP解法（完全背包）"></a>DP解法（完全背包）</h5><p>作为这篇blog的第一篇完全背包问题，这里还是要简单说明的。<br>和0-1背包不同，完全背包指的是每一样物品可以被无限次数的取走，这里有两种思路：</p><ul><li>使用三层循环：for k in range(j&#x2F;&#x2F;coins[i-1]+1)，尝试当前容量下可以取多少件当前物品（逐一尝试）。<ul><li>但实际上会产生很多额外操作，效率太低，也比较麻烦，不建议采用。</li></ul></li><li>所以一般使用如0-1背包问题的二层循环，不过状态转移方程会有所变化。<ul><li>0-1背包：dp[i][j] &#x3D; max(dp[i-1][j], dp[i-1][j-v] + w)</li><li>完全背包：dp[i][j] &#x3D; max(dp[i-1][j], dp[i][j-v] + w)</li><li>可以看到，两者的状态转移方程只有细微的不同，但这其实就是关键之处，具体如下面两张图片所示。</li></ul></li></ul><img src="/2023/04/17/leetcode/dong-tai-gui-hua/10.png" class="" title="0-1背包"><img src="/2023/04/17/leetcode/dong-tai-gui-hua/9.png" class="" title="完全背包"><p>这里需要说明，假设当前物品维this。<br>对于0-1背包而言，需要比较的是<code>不取this</code>和<code>取this</code><br>对于完全背包而言，需要比较的是<code>不取this</code>和<code>要不要多取1个this</code><br><font color=red>这里多取不一定真的取多个，因为不多取这一个时的值可能也和上一层一样，只是说目前的状态允许尝试多取一个。</font><br><font color=blue>实际上，完全背包在取第1个this的时候判断是和0-1背包问题一致的，因为在此之前已经进行dp[i][j] &#x3D; dp[i-1][j]的操作了。</font></p><p>首先还是尝试不优化状态空间：<code>二维</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coins<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>coins<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>inf<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">>=</span> coins<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">if</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> inf<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后尝试优化状态空间：<code>一维</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coins<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>coins<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span>inf<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>coin<span class="token punctuation">,</span> amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>coin<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res <span class="token keyword">if</span> res <span class="token operator">!=</span> inf <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color=green face="STCAIYUN">花里胡哨</font>（<font color=grey><del>不是</del></font></p><h4 id="518-零钱兑换-II"><a href="#518-零钱兑换-II" class="headerlink" title="518. 零钱兑换 II"></a>518. 零钱兑换 II</h4><p><a href="https://leetcode-cn.com/problems/coin-change-2/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>同样是完全背包问题，不过上题问的是使用最少硬币的组合，这题问的是组合数。</p><blockquote><p>输入：amount &#x3D; 5, coins &#x3D; [1, 2, 5]<br>输出：4<br>解释：有四种方式可以凑成总金额：<br>5&#x3D;5<br>5&#x3D;2+2+1<br>5&#x3D;2+1+1+1<br>5&#x3D;1+1+1+1+1</p></blockquote><h5 id="DP解法（完全背包）-1"><a href="#DP解法（完全背包）-1" class="headerlink" title="DP解法（完全背包）"></a>DP解法（完全背包）</h5><p>这题可以参考322. 零钱兑换 + 494. 目标和，具体就不解释了，就是完全背包+组合数</p><p><font color=red> wuhu </font><br><font color=blue> 芜湖 </font></p><p>首先还是尝试不优化状态空间：<code>二维</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amount<span class="token punctuation">:</span> int<span class="token punctuation">,</span> coins<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>coins<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> j <span class="token operator">>=</span> coins<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后尝试优化状态空间：<code>一维</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amount<span class="token punctuation">:</span> int<span class="token punctuation">,</span> coins<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>coins<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>coin<span class="token punctuation">,</span> amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>coin<span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139. 单词拆分"></a>139. 单词拆分</h4><p><a href="https://leetcode.cn/problems/word-break/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>完全背包问题，和前面两题不一样，这题要简单点，问的是是否可以。</p><blockquote><p>输入: s &#x3D; “leetcode”, wordDict &#x3D; [“leet”, “code”]<br>输出: true<br>解释: 返回 true 因为 “leetcode” 可以由 “leet” 和 “code” 拼接成。</p></blockquote><h5 id="DP解法（完全背包）-2"><a href="#DP解法（完全背包）-2" class="headerlink" title="DP解法（完全背包）"></a>DP解法（完全背包）</h5><p>思路对了就行，坑点是他有排列顺序</p><p><font color=red> wuhu </font></p><p>首先还是尝试不优化状态空间：<code>二维</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amount<span class="token punctuation">:</span> int<span class="token punctuation">,</span> coins<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>coins<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> j <span class="token operator">>=</span> coins<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后尝试优化状态空间：<code>一维</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amount<span class="token punctuation">:</span> int<span class="token punctuation">,</span> coins<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        size <span class="token operator">=</span> len<span class="token punctuation">(</span>coins<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>coin<span class="token punctuation">,</span> amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>coin<span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷爆leetcode：搜索</title>
      <link href="/2023/03/08/leetcode/sou-suo/"/>
      <url>/2023/03/08/leetcode/sou-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="1-广度优先算法BFS-Breadth-First-Search"><a href="#1-广度优先算法BFS-Breadth-First-Search" class="headerlink" title="1 广度优先算法BFS(Breadth First Search)"></a>1 广度优先算法BFS(Breadth First Search)</h3><h4 id="1-1-基本实现思想"><a href="#1-1-基本实现思想" class="headerlink" title="1.1 基本实现思想"></a>1.1 基本实现思想</h4><ul><li>（1） 顶点v入队列。</li><li>（2） 当队列非空时则继续执行，否则算法结束。</li><li>（3） 出队列取得队头顶点v；</li><li>（4） 查找顶点v的所以子节点，并依次进入队列；</li><li>（5） 转到步骤（2）。</li></ul><h4 id="1-2-Python伪代码"><a href="#1-2-Python伪代码" class="headerlink" title="1.2 Python伪代码"></a>1.2 Python伪代码</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">BFS</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>　　Q<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>　　Q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>　　<span class="token keyword">while</span> len<span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>　　　　node<span class="token operator">=</span>Q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>　　　　<span class="token keyword">print</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span>　　　　<span class="token keyword">for</span> i <span class="token keyword">in</span> node_child<span class="token punctuation">:</span>　　　　　　Q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node_child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-深度优先算法DFS-Depth-First-Search"><a href="#2-深度优先算法DFS-Depth-First-Search" class="headerlink" title="2 深度优先算法DFS(Depth First Search)"></a>2 深度优先算法DFS(Depth First Search)</h3><h4 id="2-1-基本实现思想"><a href="#2-1-基本实现思想" class="headerlink" title="2.1 基本实现思想"></a>2.1 基本实现思想</h4><ul><li>（1） 访问顶点v，打印节点；</li><li>（2） 遍历v的子节点w，while（w存在），递归执行该节点；</li></ul><h4 id="2-2-Python伪代码"><a href="#2-2-Python伪代码" class="headerlink" title="2.2 Python伪代码"></a>2.2 Python伪代码</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">DFS</span><span class="token punctuation">(</span>Vetex v<span class="token punctuation">)</span><span class="token punctuation">:</span>    Visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">for</span> each w adjacent to v<span class="token punctuation">:</span>       　<span class="token keyword">if</span> <span class="token operator">not</span> Visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">:</span>            DFS<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-回溯-Backtracking"><a href="#3-回溯-Backtracking" class="headerlink" title="3 回溯(Backtracking)"></a>3 回溯(Backtracking)</h3><h4 id="3-1-基本实现思想"><a href="#3-1-基本实现思想" class="headerlink" title="3.1 基本实现思想"></a>3.1 基本实现思想</h4><p>Backtracking（回溯）属于 DFS。</p><ul><li>普通 DFS 主要用在<code>可达性问题</code> ，这种问题只需要执行到特点的位置然后返回即可。</li><li>而 Backtracking 主要用于求解<code>排列组合</code>问题，例如有 { ‘a’,’b’,’c’ } 三个字符，求解所有由这三个字符排列得到的字符串，这种问题在执行到特定的位置返回之后还会继续执行求解过程。<br>因为 Backtracking 不是立即返回，而要继续求解，因此在程序实现时，需要注意对元素的标记问题：</li><li>在访问一个新元素进入新的递归调用时，需要将新元素标记为已经访问，这样才能在继续递归调用时不用重复访问该元素；</li><li>但是在递归返回时，需要将元素标记为未访问，因为只需要保证在一个递归链中不同时访问一个元素，可以访问已经访问过但是不在当前递归链中的元素。</li></ul><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><h3 id="1-BFS"><a href="#1-BFS" class="headerlink" title="1 BFS"></a>1 BFS</h3><h4 id="1091-二进制矩阵中的最短路径"><a href="#1091-二进制矩阵中的最短路径" class="headerlink" title="1091. 二进制矩阵中的最短路径"></a>1091. 二进制矩阵中的最短路径</h4><p><a href="https://leetcode-cn.com/problems/shortest-path-in-binary-matrix/">leetcode</a></p><p>难度: <code>中等</code></p><img src="/2023/03/08/leetcode/sou-suo/0.png" class="" title="题目例图"><p>BFS模板题，开胃菜，不多说。</p><blockquote><p>输入：grid &#x3D; [[0,1],[1,0]]<br>输出：2</p></blockquote><h5 id="普通BFS题解"><a href="#普通BFS题解" class="headerlink" title="普通BFS题解"></a>普通BFS题解</h5><p>思路就是BFS</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shortestPathBinaryMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        <span class="token keyword">if</span> length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        visit <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>        direct <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        q<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        visit<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        step <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                x<span class="token punctuation">,</span> y <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> pos_x<span class="token punctuation">,</span> pos_y <span class="token keyword">in</span> direct<span class="token punctuation">:</span>                    new_x <span class="token operator">=</span> x <span class="token operator">+</span> pos_x                    new_y <span class="token operator">=</span> y <span class="token operator">+</span> pos_y                    <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> new_x <span class="token operator">&lt;</span> length <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> new_y <span class="token operator">&lt;</span>length <span class="token operator">and</span> grid<span class="token punctuation">[</span>new_x<span class="token punctuation">]</span><span class="token punctuation">[</span>new_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token operator">not</span> visit<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">(</span>new_x<span class="token punctuation">,</span> new_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> new_x <span class="token operator">==</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">and</span> new_y <span class="token operator">==</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                            <span class="token keyword">return</span> step <span class="token operator">+</span> <span class="token number">1</span>                        q<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token punctuation">(</span>new_x<span class="token punctuation">,</span> new_y<span class="token punctuation">)</span><span class="token punctuation">)</span>                        visit<span class="token punctuation">[</span><span class="token punctuation">(</span>new_x<span class="token punctuation">,</span> new_y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>            step <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="127-单词接龙"><a href="#127-单词接龙" class="headerlink" title="127. 单词接龙"></a>127. 单词接龙</h4><p><a href="https://leetcode-cn.com/problems/word-ladder/description/">leetcode</a></p><p>难度: <code>困难</code></p><p>这题其实思路还是比较简单的，找出最短路径，其实就是广度优先搜索BFS，只不过复杂度大了点，所以我们在使用BFS的时候会发现直接超时了，但这不是问题。<br>因为我们有python的set()</p><ul><li>wordList对应的set集合，方便<code>O(1)</code>时间复杂度查找。</li><li>python中，用set来表示一个无序不重复元素的序列。set的只要作用就是用来给数据去重。 </li><li>可以使用大括号<code>&#123;&#125;</code>或者<code>set()</code>函数创建集合，但是注意如果创建一个空集合必须用set()而不是{}，因为{}是用来表示空字典类型的。</li></ul><p>说白了set()就是一个HashTable。</p><p>但其实更优的策略是使用双向BFS（但我发现并没有提高太大的效率，反正困难题暂时不求甚解，过了就行）（我才不是不会优化建图呢&#x3D;&#x3D;!）</p><blockquote><p>输入：beginWord &#x3D; “hit”, endWord &#x3D; “cog”, wordList &#x3D; [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]<br>输出：5<br>解释：一个最短转换序列是 “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”, 返回它的长度 5。</p></blockquote><h5 id="普通BFS题解-1"><a href="#普通BFS题解-1" class="headerlink" title="普通BFS题解"></a>普通BFS题解</h5><p>思路如图所示。</p><img src="/2023/03/08/leetcode/sou-suo/1.png" class="" title="普通BFS"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">ladderLength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beginWord<span class="token punctuation">:</span> str<span class="token punctuation">,</span> endWord<span class="token punctuation">:</span> str<span class="token punctuation">,</span> wordList<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">in</span><span class="token punctuation">:</span>        st <span class="token operator">=</span> set<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span>        <span class="token keyword">if</span> endWord <span class="token operator">not</span> <span class="token keyword">in</span> st<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> beginWord <span class="token operator">==</span> endWord<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        que <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>beginWord<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        vis <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        vis<span class="token punctuation">.</span>add<span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>        <span class="token keyword">while</span> que<span class="token punctuation">:</span>            word<span class="token punctuation">,</span> step <span class="token operator">=</span> que<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> word <span class="token operator">==</span> endWord<span class="token punctuation">:</span>                <span class="token keyword">return</span> step            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    tmp <span class="token operator">=</span> word<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">+</span> word<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> tmp <span class="token operator">not</span> <span class="token keyword">in</span> vis <span class="token operator">and</span> tmp <span class="token keyword">in</span> st<span class="token punctuation">:</span>                        que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        vis<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="双向BFS题解"><a href="#双向BFS题解" class="headerlink" title="双向BFS题解"></a>双向BFS题解</h5><img src="/2023/03/08/leetcode/sou-suo/2.png" class="" title="普通BFS"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">ladderLength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beginWord<span class="token punctuation">:</span> str<span class="token punctuation">,</span> endWord<span class="token punctuation">:</span> str<span class="token punctuation">,</span> wordList<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        st <span class="token operator">=</span> set<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span>        <span class="token keyword">if</span> endWord <span class="token operator">not</span> <span class="token keyword">in</span> st<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> beginWord <span class="token operator">==</span> endWord<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        lque <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        rque <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        lque<span class="token punctuation">.</span>append<span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>        rque<span class="token punctuation">.</span>append<span class="token punctuation">(</span>endWord<span class="token punctuation">)</span>                lvis <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        rvis <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        lvis<span class="token punctuation">.</span>add<span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>        rvis<span class="token punctuation">.</span>add<span class="token punctuation">(</span>endWord<span class="token punctuation">)</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>        step <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> lque <span class="token operator">and</span> rque<span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>lque<span class="token punctuation">)</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>rque<span class="token punctuation">)</span><span class="token punctuation">:</span>                lque<span class="token punctuation">,</span> rque <span class="token operator">=</span> rque<span class="token punctuation">,</span> lque                lvis<span class="token punctuation">,</span> rvis <span class="token operator">=</span> rvis<span class="token punctuation">,</span> lvis            step <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lque<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                word <span class="token operator">=</span> lque<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># if word in rvis:</span>                <span class="token comment" spellcheck="true">#     return step</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        tmp <span class="token operator">=</span> word<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">+</span> word<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                        <span class="token keyword">if</span> tmp <span class="token operator">not</span> <span class="token keyword">in</span> lvis <span class="token operator">and</span> tmp <span class="token keyword">in</span> st<span class="token punctuation">:</span>                            <span class="token keyword">if</span> tmp <span class="token keyword">in</span> rvis<span class="token punctuation">:</span>                                <span class="token keyword">return</span> step <span class="token operator">+</span> <span class="token number">1</span>                            lque<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>                            lvis<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-DFS"><a href="#2-DFS" class="headerlink" title="2 DFS"></a>2 DFS</h3><h4 id="695-岛屿的最大面积"><a href="#695-岛屿的最大面积" class="headerlink" title="695. 岛屿的最大面积"></a>695. 岛屿的最大面积</h4><p><a href="https://leetcode-cn.com/problems/word-ladder/description/">leetcode</a></p><p>难度: <code>中等</code></p><img src="/2023/03/08/leetcode/sou-suo/3.png" class="" title="题目例图"><p>这题是典型的岛类问题，其实用DFS、BFS、并查集都是可以做的。<br>我个人使用的DFS，因为代码量我感觉更小（可能是我菜）。</p><blockquote><p>输入：beginWord &#x3D; “hit”, endWord &#x3D; “cog”, wordList &#x3D; [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]<br>输出：5<br>解释：一个最短转换序列是 “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”, 返回它的长度 5。</p></blockquote><h5 id="普通DFS题解"><a href="#普通DFS题解" class="headerlink" title="普通DFS题解"></a>普通DFS题解</h5><p>大概是这个样子！</p><img src="/2023/03/08/leetcode/sou-suo/4.png" class="" title="题解例图"><p>遍历整个grid，对于遇到的每个<code>grid == 1</code>，都进行一次DFS，注意不需要回溯，因为访问过的就不能再次访问了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> x <span class="token operator">></span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">or</span> y <span class="token operator">></span> len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">or</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            cnt <span class="token operator">=</span> <span class="token number">1</span>            cnt <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            cnt <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            cnt <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>            cnt <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>            <span class="token keyword">return</span> cnt        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> line <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j<span class="token punctuation">,</span> _ <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>                cnt <span class="token operator">=</span> max<span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>这里用了4个单独的dfs是为了&quot;优化&quot;哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈！</code></p><h4 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a>200. 岛屿数量</h4><p><a href="https://leetcode-cn.com/problems/number-of-islands/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>这题也是典型的岛类问题，用DFS、BFS、并查集也都是可以做的。<br>DFSDFSDFS!!!</p><blockquote><p>输入：grid &#x3D; [<br>  [“1”,”1”,”1”,”1”,”0”],<br>  [“1”,”1”,”0”,”1”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”0”,”0”,”0”]<br>]<br>输出：1</p></blockquote><h5 id="普通DFS题解-1"><a href="#普通DFS题解-1" class="headerlink" title="普通DFS题解"></a>普通DFS题解</h5><p>这个更简单了!</p><img src="/2023/03/08/leetcode/sou-suo/5.gif" class="" title="题解例图"><p>遍历整个grid，对于遇到的每个<code>grid == 1</code>，都进行一次DFS，也是要注意不需要回溯，因为访问过的就不能再次访问了。</p><p>其实是上一题的简化版。</p><p>例图里是<code>1-&gt;2</code>，但实际上我用的是<code>1-&gt;0</code>，岂不是更妙？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> <span class="token operator">not</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> y <span class="token operator">&lt;=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">or</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span>            cnt <span class="token operator">=</span> <span class="token number">1</span>            dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>            <span class="token keyword">return</span> cnt        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> line <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j<span class="token punctuation">,</span> node <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> node <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>                    cnt <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>        <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="130-被围绕的区域"><a href="#130-被围绕的区域" class="headerlink" title="130. 被围绕的区域"></a>130. 被围绕的区域</h4><p><a href="https://leetcode-cn.com/problems/surrounded-regions/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>我认为啊，这道题不难，但是有陷阱，它并不是说把非边界的<code>O</code>都换成<code>X</code>，而是强调与处在边界的<code>O</code>相连的<code>O</code>其实都是不可以变的。</p><p>理解了这里，就简单多了。</p><blockquote><p>输入：board &#x3D; [[“X”,”X”,”X”,”X”],[“X”,”O”,”O”,”X”],[“X”,”X”,”O”,”X”],[“X”,”O”,”X”,”X”]]<br>输出：[[“X”,”X”,”X”,”X”],[“X”,”X”,”X”,”X”],[“X”,”X”,”X”,”X”],[“X”,”O”,”X”,”X”]]<br>解释：被围绕的区间不会存在于边界上，换句话说，任何边界上的 ‘O’ 都不会被填充为 ‘X’。 任何不在边界上，或不与边界上的 ‘O’ 相连的 ‘O’ 最终都会被填充为 ‘X’。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。</p></blockquote><h5 id="普通DFS题解-2"><a href="#普通DFS题解-2" class="headerlink" title="普通DFS题解"></a>普通DFS题解</h5><p>具体思路是，把处在边界的<code>O</code>和与其相连的<code>O</code>先临时处理为<code>F</code>，然后进行遍历，遇到<code>O</code>就DFS，把所有的<code>O</code>都变成<code>X</code>。</p><p>最后别忘了把设为<code>F</code>的<code>O</code>重置回去。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">(</span>board<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">or</span> <span class="token operator">not</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> j <span class="token operator">&lt;=</span> len<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">or</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'O'</span> <span class="token punctuation">:</span>                <span class="token keyword">return</span>            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'F'</span>            dfs<span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>board<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>board<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dfs<span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>board<span class="token punctuation">,</span> len<span class="token punctuation">(</span>board<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dfs<span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>board<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">:</span>                    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'F'</span><span class="token punctuation">:</span>                    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'O'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="417-太平洋大西洋水流问题"><a href="#417-太平洋大西洋水流问题" class="headerlink" title="417. 太平洋大西洋水流问题"></a>417. 太平洋大西洋水流问题</h4><p><a href="https://leetcode-cn.com/problems/pacific-atlantic-water-flow/description/">leetcode</a></p><p>难度: <code>中等</code></p><img src="/2023/03/08/leetcode/sou-suo/6.jpg" class="" title="题目例图"><p>这题从正面强行做出比较困难，至少我是失败了，需要考虑的问题实在是太多了。<br>逆向思考一下或许更好。</p><blockquote><p>输入: heights &#x3D; [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]<br>输出: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]</p></blockquote><h5 id="普通DFS题解-3"><a href="#普通DFS题解-3" class="headerlink" title="普通DFS题解"></a>普通DFS题解</h5><p>具体思路是分别从大西洋和太平洋开始，让水从低往高流。<br>从大西洋开始可以流到的所有地方都做一个标记，从太平洋开始可以流到的地方也做一个不同的标记，最后遍历整个小岛，两种标记都有的地方就是我们想要的地方。<br><code>note: 这里的流到指的是水往高处流！</code></p><img src="/2023/03/08/leetcode/sou-suo/7.png" class="" title="题解示意图a"><img src="/2023/03/08/leetcode/sou-suo/8.png" class="" title="题解示意图b"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pacificAtlantic</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>heights<span class="token punctuation">)</span>        m <span class="token operator">=</span> len<span class="token punctuation">(</span>heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ao <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> m <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        po <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> m <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> n<span class="token number">-1</span> <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> y <span class="token operator">&lt;=</span> m<span class="token number">-1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>heights<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                ao<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                po<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">for</span> nx<span class="token punctuation">,</span> ny <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> isValid<span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span> <span class="token operator">or</span> heights<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                dfs<span class="token punctuation">(</span>heights<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token keyword">return</span>        visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> m <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            dfs<span class="token punctuation">(</span>heights<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dfs<span class="token punctuation">(</span>heights<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> m <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            dfs<span class="token punctuation">(</span>heights<span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dfs<span class="token punctuation">(</span>heights<span class="token punctuation">,</span> x<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> po<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> ao<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Backtracking"><a href="#3-Backtracking" class="headerlink" title="3 Backtracking"></a>3 Backtracking</h3><h4 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a>17. 电话号码的字母组合</h4><p><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">leetcode</a></p><p>难度: <code>中等</code></p><p>这题是典型的排列组合问题，递归+回溯！</p><blockquote><p>输入：digits &#x3D; “23”<br>输出：[“ad”,”ae”,”af”,”bd”,”be”,”bf”,”cd”,”ce”,”cf”]</p></blockquote><h5 id="回溯DFS题解"><a href="#回溯DFS题解" class="headerlink" title="回溯DFS题解"></a>回溯DFS题解</h5><p>具体思路略，这里可以把list()当栈用。</p><img src="/2023/03/08/leetcode/sou-suo/10.png" class="" title="题解示意图"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> digits <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        phone <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'2':['a','b','c'],</span>                 <span class="token string">'3'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token string">'4'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token string">'5'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token string">'6'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token string">'7'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token string">'8'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token string">'9'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        res <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        res_all <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> step <span class="token operator">==</span> len<span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">:</span>                res_all<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> ch <span class="token keyword">in</span> phone<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res_all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a>46. 全排列</h4><p><a href="https://leetcode-cn.com/problems/permutations/">leetcode</a></p><p>难度: <code>中等</code></p><p>这题和上一题基本一样，是典型的排列组合问题，递归+回溯！</p><blockquote><p>输入：nums &#x3D; [1,2,3]<br>输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p></blockquote><h5 id="回溯DFS题解-1"><a href="#回溯DFS题解-1" class="headerlink" title="回溯DFS题解"></a>回溯DFS题解</h5><p>具体思路略，这里可以把list()当栈用，用set()是为了加速执行<code>if num not in vis:</code>，这是确保每一层递归不会出现重复的数字。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        vis <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> step <span class="token operator">==</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                <span class="token keyword">if</span> num <span class="token operator">not</span> <span class="token keyword">in</span> vis<span class="token punctuation">:</span>                    tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>                    vis<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">)</span>                    dfs<span class="token punctuation">(</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    vis<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">return</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a>77. 组合</h4><p><a href="https://leetcode-cn.com/problems/combinations/">leetcode</a></p><p>难度: <code>中等</code></p><p>需要进行一定优化的回溯问题。</p><blockquote><p>输入：n &#x3D; 4, k &#x3D; 2<br>输出：<br>[<br>  [2,4],<br>  [3,4],<br>  [2,3],<br>  [1,2],<br>  [1,3],<br>  [1,4],<br>]</p></blockquote><h5 id="回溯DFS题解-2"><a href="#回溯DFS题解-2" class="headerlink" title="回溯DFS题解"></a>回溯DFS题解</h5><p>优化过程：</p><ol><li>已经选择的元素个数：step;</li><li>还需要的元素个数为: k - step;</li><li>在集合n中至多要从该起始位置 : n - (k - step) + 1，开始遍历<br>注：还需要定义一个开始的坐标nn记录上一层递归所用的数</li></ol><img src="/2023/03/08/leetcode/sou-suo/11.png" class="" title="普通回溯"><img src="/2023/03/08/leetcode/sou-suo/12.png" class="" title="优化回溯"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> nn<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> step <span class="token operator">==</span> k<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> step<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">//</span>剪枝优化                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷爆leetcode：双指针</title>
      <link href="/2023/01/21/leetcode/shuang-zhi-zhen/"/>
      <url>/2023/01/21/leetcode/shuang-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="1-双指针-double-pointer"><a href="#1-双指针-double-pointer" class="headerlink" title="1 双指针(double pointer)"></a>1 双指针(double pointer)</h3><p>双指针主要用于遍历数组，两个指针指向不同的元素，从而协同完成任务。（over）<br>这部分虽然没有参考cyc的思路，但是由于之前没来及写博客，所以题解思路就参考cyc的了（<a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/Leetcode%20%E9%A2%98%E8%A7%A3/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%8F%8C%E6%8C%87%E9%92%88.html#_1-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84-two-sum">cyc链接</a>）</p><p>当然，可能也会造成思路和代码不符的情况，有空慢慢改！</p><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><h3 id="1-就普通双指针啊"><a href="#1-就普通双指针啊" class="headerlink" title="1 就普通双指针啊"></a>1 就普通双指针啊</h3><h4 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a>167. 两数之和 II - 输入有序数组</h4><p><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>很多人做这个题目想不到正确的 O(N)解法，即使看了答案理解了，下次再做的时候还是会忘记。要想真正理解这道题，就要明白解法背后的道理。这样不仅可以记住这道题，还能举一反三解决类似的题目。</p><blockquote><p>输入: g &#x3D; [1,2,3], s &#x3D; [1,1]<br>输出: 1<br>解释: 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。<br>虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。<br>所以你应该输出1。</p></blockquote><h5 id="双指针题解"><a href="#双指针题解" class="headerlink" title="双指针题解"></a>双指针题解</h5><p>使用双指针，一个指针指向值较小的元素，一个指针指向值较大的元素。指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。</p><ul><li>如果两个指针指向元素的和 sum &#x3D;&#x3D; target，那么得到要求的结果；</li><li>如果 sum &gt; target，移动较大的元素，使 sum 变小一些；</li><li>如果 sum &lt; target，移动较小的元素，使 sum 变大一些。</li></ul><p>数组中的元素最多遍历一次，时间复杂度为 O(N)。只使用了两个额外变量，空间复杂度为 O(1)。</p><img src="/2023/01/21/leetcode/shuang-zhi-zhen/1.gif" class="" title="搜索空间"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> len<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">:</span>            total <span class="token operator">=</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span>            <span class="token keyword">if</span> total <span class="token operator">></span> target <span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> total <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span> <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="633-平方数之和"><a href="#633-平方数之和" class="headerlink" title="633. 平方数之和"></a>633. 平方数之和</h4><p><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/description/">leetcode</a></p><p>难度: <code>中等</code></p><blockquote><p>输入：c &#x3D; 5<br>输出：true<br>解释：1 * 1 + 2 * 2 &#x3D; 5</p></blockquote><h5 id="贪心题解"><a href="#贪心题解" class="headerlink" title="贪心题解"></a>贪心题解</h5><p>可以看成是在元素为 0~target 的有序数组中查找两个数，使得这两个数的平方和为 target，如果能找到，则返回 true，表示 target 是两个整数的平方和。</p><p>本题和 167 类似，只有一个明显区别：一个是和为 target，一个是平方和为 target。本题同样可以使用双指针得到两个数，使其平方和为 target。</p><p>本题的关键是右指针的初始化，实现剪枝，从而降低时间复杂度。设右指针为 x，左指针固定为 0，为了使 0^2 + x^2 的值尽可能接近 target，我们可以将 x 取为 sqrt(target)。</p><p>因为最多只需要遍历一次 0~sqrt(target)，所以时间复杂度为 O(sqrt(target))。又因为只使用了两个额外的变量，因此空间复杂度为 O(1)。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">judgeSquareSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right <span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span>            total <span class="token operator">=</span> left<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> right<span class="token operator">**</span><span class="token number">2</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>            <span class="token keyword">if</span> total <span class="token operator">></span> c <span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> total <span class="token operator">&lt;</span> c <span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span> <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="345-反转字符串中的元音字母"><a href="#345-反转字符串中的元音字母" class="headerlink" title="345. 反转字符串中的元音字母"></a>345. 反转字符串中的元音字母</h4><p><a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/description/">leetcode</a></p><p>难度: <code>简单</code></p><img src="/2023/01/21/leetcode/shuang-zhi-zhen/2.png" class="" title="题意"><blockquote><p>输入：s &#x3D; “hello”<br>输出：”holle”</p></blockquote><h5 id="双指针题解-1"><a href="#双指针题解-1" class="headerlink" title="双指针题解"></a>双指针题解</h5><p>使用双指针，一个指针从头向尾遍历，一个指针从尾到头遍历，当两个指针都遍历到元音字符时，交换这两个元音字符。</p><p>为了快速判断一个字符是不是元音字符，我们将全部元音字符添加到集合 HashSet 中，从而以 O(1) 的时间复杂度进行该操作。</p><ul><li>时间复杂度为 O(N)：只需要遍历所有元素一次</li><li>空间复杂度 O(1)：只需要使用两个额外变量</li></ul><img src="/2023/01/21/leetcode/shuang-zhi-zhen/3.gif" class="" title="题解示意"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseVowels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        s1 <span class="token operator">=</span> list<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>        yy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'I'</span><span class="token punctuation">,</span><span class="token string">'O'</span><span class="token punctuation">,</span><span class="token string">'U'</span><span class="token punctuation">]</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">:</span>            <span class="token keyword">while</span> s1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> yy <span class="token operator">and</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> s1<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> yy <span class="token operator">and</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>            temp <span class="token operator">=</span> s1<span class="token punctuation">[</span>left<span class="token punctuation">]</span>            s1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s1<span class="token punctuation">[</span>right<span class="token punctuation">]</span>            s1<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp            left <span class="token operator">+=</span> <span class="token number">1</span>            right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="680-验证回文字符串-Ⅱ"><a href="#680-验证回文字符串-Ⅱ" class="headerlink" title="680. 验证回文字符串 Ⅱ"></a>680. 验证回文字符串 Ⅱ</h4><p><a href="https://leetcode-cn.com/problems/valid-palindrome-ii/description/">leetcode</a></p><p>难度: <code>简单</code></p><p>所谓的回文字符串，是指具有左右对称特点的字符串，例如 “abcba” 就是一个回文字符串。</p><p>使用双指针可以很容易判断一个字符串是否是回文字符串：令一个指针从左到右遍历，一个指针从右到左遍历，这两个指针同时移动一个位置，每次都判断两个指针指向的字符是否相同，如果都相同，字符串才是具有左右对称性质的回文字符串。</p><img src="/2023/01/21/leetcode/shuang-zhi-zhen/4.gif" class="" title="题意"><blockquote><p>输入: s &#x3D; “aba”<br>输出: true</p></blockquote><h5 id="双指针题解-2"><a href="#双指针题解-2" class="headerlink" title="双指针题解"></a>双指针题解</h5><p>本题的关键是处理删除一个字符。在使用双指针遍历字符串时，如果出现两个指针指向的字符不相等的情况，我们就试着删除一个字符，再判断删除完之后的字符串是否是回文字符串。</p><p>在判断是否为回文字符串时，我们不需要判断整个字符串，因为左指针左边和右指针右边的字符之前已经判断过具有对称性质，所以只需要判断中间的子字符串即可。</p><p>在试着删除字符时，我们既可以删除左指针指向的字符，也可以删除右指针指向的字符。</p><img src="/2023/01/21/leetcode/shuang-zhi-zhen/5.gif" class="" title="题解示意"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        l<span class="token operator">=</span><span class="token number">0</span>        r<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;</span>r<span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                l<span class="token operator">+=</span><span class="token number">1</span>                r<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> s<span class="token punctuation">[</span>l<span class="token punctuation">:</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>l<span class="token punctuation">:</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">or</span> s<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="524-通过删除字母匹配到字典里最长单词"><a href="#524-通过删除字母匹配到字典里最长单词" class="headerlink" title="524. 通过删除字母匹配到字典里最长单词"></a>524. 通过删除字母匹配到字典里最长单词</h4><p><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>删除 s 中的一些字符，使得它构成字符串列表 d 中的一个字符串，找出能构成的最长字符串。如果有多个相同长度的结果，返回字典序的最小字符串。</p><blockquote><p>输入：s &#x3D; “abpcplea”, dictionary &#x3D; [“ale”,”apple”,”monkey”,”plea”]<br>输出：”apple”</p></blockquote><h5 id="双指针题解-3"><a href="#双指针题解-3" class="headerlink" title="双指针题解"></a>双指针题解</h5><p>通过删除字符串 s 中的一个字符能得到字符串 t，可以认为 t 是 s 的子序列，我们可以使用双指针来判断一个字符串是否为另一个字符串的子序列。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        tmp <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> prices<span class="token punctuation">:</span>            <span class="token keyword">if</span> p <span class="token operator">></span> tmp<span class="token punctuation">:</span>                res <span class="token operator">+=</span> p <span class="token operator">-</span> tmp            tmp <span class="token operator">=</span> p        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷爆leetcode：二分查找</title>
      <link href="/2022/12/17/leetcode/er-fen-cha-zhao/"/>
      <url>/2022/12/17/leetcode/er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="1-动态规划-Dynamic-Programming"><a href="#1-动态规划-Dynamic-Programming" class="headerlink" title="1 动态规划(Dynamic Programming)"></a>1 动态规划(Dynamic Programming)</h3><h4 id="1-1-基本实现思想"><a href="#1-1-基本实现思想" class="headerlink" title="1.1 基本实现思想"></a>1.1 基本实现思想</h4><blockquote><p>参考自：<a href="https://labuladong.gitee.io/algo/1/4/">https://labuladong.gitee.io/algo/1/4/</a></p></blockquote><p><code>首先，动态规划问题的一般形式就是求最值</code>。动态规划其实是运筹学的一种最优化方法，只不过在计算机问题上应用比较多，比如说让你求最长递增子序列呀，最小编辑距离呀等等。</p><p>既然是要求最值，核心问题是什么呢？<code>求解动态规划的核心问题是穷举</code>。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值呗。</p><p>动态规划这么简单，就是穷举就完事了？我看到的动态规划问题都很难啊！</p><p>首先，动态规划的穷举有点特别，因为这类问题<code>存在「重叠子问题」</code>，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。</p><p>而且，动态规划问题一定会<code>具备「最优子结构」</code>，才能通过子问题的最值得到原问题的最值。</p><p>另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出<code>正确的「状态转移方程」</code>，才能正确地穷举。</p><p>以上提到的重叠子问题、最优子结构、状态转移方程就是动态规划三要素。具体什么意思等会会举例详解，但是在实际的算法问题中，<code>写出状态转移方程是最困难的</code>，这也就是为什么很多朋友觉得动态规划问题困难的原因，我来提供我研究出来的一个思维框架，辅助你思考状态转移方程：</p><p><code>明确 base case -&gt; 明确「状态」-&gt; 明确「选择」 -&gt; 定义 dp 数组/函数的含义。</code></p><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><h3 id="1-斐波那契数列"><a href="#1-斐波那契数列" class="headerlink" title="1 斐波那契数列"></a>1 斐波那契数列</h3><h4 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a>70. 爬楼梯</h4><p><a href="https://leetcode-cn.com/problems/climbing-stairs/description/">leetcode</a></p><p>难度: <code>简单</code></p><p>简单DP，开胃菜，不多说。</p><blockquote><p>输入：n &#x3D; 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。</p></blockquote><ol><li>1 阶 + 1 阶</li><li>2 阶</li></ol><h5 id="DP解法"><a href="#DP解法" class="headerlink" title="DP解法"></a>DP解法</h5><p><strong>dp[i] &#x3D; dp[i-1] + dp[i-2]</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token operator">+</span>c        <span class="token keyword">return</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷爆leetcode：数学</title>
      <link href="/2022/11/23/leetcode/shu-xue/"/>
      <url>/2022/11/23/leetcode/shu-xue/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="1-数学-Math"><a href="#1-数学-Math" class="headerlink" title="1 数学(Math)"></a>1 数学(Math)</h3><h4 id="1-1-基本原理"><a href="#1-1-基本原理" class="headerlink" title="1.1 基本原理"></a>1.1 基本原理</h4><p>说白了就是利用已知的数学知识对题目进行分析和解答.<br><font color=blue>强迫症必须多打两级标题</font></p><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><h3 id="1-素数分解"><a href="#1-素数分解" class="headerlink" title="1 素数分解"></a>1 素数分解</h3><p>每一个数都可以分解成素数的乘积，例如 84 &#x3D; 22 * 31 * 50 * 71 * 110 * 130 * 170 * …</p><h4 id="204-计数质数"><a href="#204-计数质数" class="headerlink" title="204. 计数质数"></a>204. 计数质数</h4><p><a href="https://leetcode.cn/problems/count-primes/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>数学题，质数？总数？那就用素数筛啦。<br><a href="https://leetcode.cn/problems/count-primes/solution/mei-ju-ai-shi-shai-xian-xing-shai-qi-shu-shai-5xin/">一些素数筛的总结</a><br><a href="https://zhuanlan.zhihu.com/p/100051075">另一些素数筛的总结</a></p><blockquote><p>输入：n &#x3D; 10<br>输出：4<br>解释：小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</p></blockquote><h5 id="数学解法"><a href="#数学解法" class="headerlink" title="数学解法"></a>数学解法</h5><p>网上找了个似乎最好的素数筛，但是结果也只是80%+<br>找了题解中比较靠谱的一个，98%+</p><p>说实话，没怎么看懂，还是背板吧！</p><ul><li>isPrimeOdd &#x3D; [1] * (n &#x2F;&#x2F; 2)</li><li>range(1, int(n**0.5) &#x2F;&#x2F; 2 + 1)</li><li>isPrimeOdd[i<em>2</em>(i+1):m:2<em>i+1] &#x3D; [0] * ((m+i)&#x2F;&#x2F;(2</em>i+1)-i)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            isPrimeOdd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>n<span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> isPrimeOdd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    isPrimeOdd<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>m<span class="token punctuation">:</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span>            <span class="token keyword">return</span> sum<span class="token punctuation">(</span>isPrimeOdd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种使用numpy加速的方法（埃氏筛·优化），注意用np.sum()</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        primes <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        primes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> primes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>n <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                primes<span class="token punctuation">[</span>i <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> int<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-整除"><a href="#2-整除" class="headerlink" title="2 整除"></a>2 整除</h3><p>暂无题目。</p><p>令 x &#x3D; 2m0 * 3m1 * 5m2 * 7m3 * 11m4 * …</p><p>令 y &#x3D; 2n0 * 3n1 * 5n2 * 7n3 * 11n4 * …</p><p>如果 x 整除 y（y mod x &#x3D;&#x3D; 0），则对于所有 i，mi &lt;&#x3D; ni。</p><h3 id="3-最大公约数最小公倍数"><a href="#3-最大公约数最小公倍数" class="headerlink" title="3 最大公约数最小公倍数"></a>3 最大公约数最小公倍数</h3><p>x 和 y 的最大公约数为：gcd(x,y) &#x3D; 2min(m0,n0) * 3min(m1,n1) * 5min(m2,n2) * …</p><p>x 和 y 的最小公倍数为：lcm(x,y) &#x3D; 2max(m0,n0) * 3max(m1,n1) * 5max(m2,n2) * …</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> int<span class="token punctuation">,</span> b<span class="token punctuation">:</span>int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> gcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最小公倍数为两数的乘积除以最大公约数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lcm</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> int<span class="token punctuation">,</span> b<span class="token punctuation">:</span>int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">//</span> gcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="000-使用位操作和减法求解最大公约数"><a href="#000-使用位操作和减法求解最大公约数" class="headerlink" title="000. 使用位操作和减法求解最大公约数"></a>000. 使用位操作和减法求解最大公约数</h4><!-- [leetcode](https://leetcode.cn/problems/count-primes/description/) --><p>难度: <code>xx</code></p><p>对于 a 和 b 的最大公约数 f(a, b)，有：</p><p>如果 a 和 b 均为偶数，f(a, b) &#x3D; 2*f(a&#x2F;2, b&#x2F;2);<br>如果 a 是偶数 b 是奇数，f(a, b) &#x3D; f(a&#x2F;2, b);<br>如果 b 是偶数 a 是奇数，f(a, b) &#x3D; f(a, b&#x2F;2);<br>如果 a 和 b 均为奇数，f(a, b) &#x3D; f(b, a-b);<br>乘 2 和除 2 都可以转换为移位操作。</p><h5 id="数学解法-1"><a href="#数学解法-1" class="headerlink" title="数学解法"></a>数学解法</h5><pre class="line-numbers language-python"><code class="language-python">public int gcd<span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span> gcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    boolean isAEven <span class="token operator">=</span> isEven<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> isBEven <span class="token operator">=</span> isEven<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isAEven <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isBEven<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> gcd<span class="token punctuation">(</span>a <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else if (isAEven &amp;&amp; !isBEven) &amp;#123;</span>        <span class="token keyword">return</span> gcd<span class="token punctuation">(</span>a <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else if (!isAEven &amp;&amp; isBEven) &amp;#123;</span>        <span class="token keyword">return</span> gcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token keyword">return</span> gcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>？？？</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷爆leetcode：贪心思想</title>
      <link href="/2022/02/11/leetcode/tan-xin-si-xiang/"/>
      <url>/2022/02/11/leetcode/tan-xin-si-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="1-贪心思想-greedy-algorithm"><a href="#1-贪心思想-greedy-algorithm" class="headerlink" title="1 贪心思想(greedy algorithm)"></a>1 贪心思想(greedy algorithm)</h3><h4 id="1-1-贪心算法的基本思路"><a href="#1-1-贪心算法的基本思路" class="headerlink" title="1.1 贪心算法的基本思路"></a>1.1 贪心算法的基本思路</h4><ul><li><p>（1） 建立数学模型来描述问题。</p></li><li><p>（2） 把求解的问题分成若干个子问题。</p></li><li><p>（3） 对每一子问题求解，得到子问题的局部最优解。</p></li><li><p>（4） 把子问题的解局部最优解合成原来解问题的一个解。</p></li></ul><h4 id="1-2-贪心算法适用的问题"><a href="#1-2-贪心算法适用的问题" class="headerlink" title="1.2 贪心算法适用的问题"></a>1.2 贪心算法适用的问题</h4><p>贪心策略的前提是：<code>局部最优策略能导致产生全局最优解</code>。</p><p>实际上，贪心算法使用的情况比较少，一般对一个问题分析是否适用于贪心算法，可以先选择该问题下的几个实际数据进行分析可以做出判断。</p><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><h3 id="1-常见贪心"><a href="#1-常见贪心" class="headerlink" title="1 常见贪心"></a>1 常见贪心</h3><h4 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a>455. 分发饼干</h4><p><a href="https://leetcode-cn.com/problems/assign-cookies/description/">leetcode</a></p><p>难度: <code>简单</code></p><p>这题比较简单，也非常经典，可以作为学习贪心思想的开胃菜。</p><blockquote><p>输入: g &#x3D; [1,2,3], s &#x3D; [1,1]<br>输出: 1<br>解释: 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。<br>虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。<br>所以你应该输出1。</p></blockquote><h5 id="贪心题解"><a href="#贪心题解" class="headerlink" title="贪心题解"></a>贪心题解</h5><ul><li>局部最优-&gt;全局最优</li><li>局部最优：小尺寸饼干给胃口小的小孩</li><li>全局最优：优先满足胃口小的小孩</li></ul><p>当然也可以偶先考虑满足胃口大的小孩。</p><p>不能把小尺寸的给大胃口的吃，因为吃不饱。<br>也不能把大尺寸的给小尺寸的吃，因为浪费。</p><p>优先满足胃口小的小孩code，注释部分为优先考虑胃口大的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> g<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        g<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#g.sort(reverse=True)</span>        s<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#s.sort(reverse=True)</span>        g_i <span class="token operator">=</span> <span class="token number">0</span>        s_i <span class="token operator">=</span> <span class="token number">0</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> g_i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">and</span> s_i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> g<span class="token punctuation">[</span>g_i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>s_i<span class="token punctuation">]</span><span class="token punctuation">:</span>                sum <span class="token operator">+=</span> <span class="token number">1</span>                g_i <span class="token operator">+=</span> <span class="token number">1</span>                s_i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                s_i <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#g_i += 1</span>        <span class="token keyword">return</span> sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="435-无重叠区间"><a href="#435-无重叠区间" class="headerlink" title="435. 无重叠区间"></a>435. 无重叠区间</h4><p><a href="https://leetcode-cn.com/problems/non-overlapping-intervals/">leetcode</a></p><p>难度: <code>中等</code></p><p>难度升级的经典题，需要一定的思考。<br>如何<code>移除最少</code>的区间呢？<br>逆向思考一下：如何<code>保留最多</code>的区间呢？（<strong>移除数&#x3D;总数-保留数</strong>）<br>是不是简单多了？</p><blockquote><p>输入: intervals &#x3D; [[1,2],[2,3],[3,4],[1,3]]<br>输出: 1<br>解释: 移除 [1,3] 后，剩下的区间没有重叠。</p></blockquote><h5 id="贪心题解-1"><a href="#贪心题解-1" class="headerlink" title="贪心题解"></a>贪心题解</h5><p>具体思路如图所示：</p><img src="/2022/02/11/leetcode/tan-xin-si-xiang/0.png" class="" title="思路图"><p>其实，这题就是<code>会议预定</code>类型的题，如果我们把本题的区间看成是会议，那么按照右端点排序，我们一定能够找到一个最先结束的会议。而这个会议一定是我们需要添加到最终结果的的首个会议。<br>所以我们要使用左区间排序（当然其实右区间也是可以的，不过就是从右往左遍历而已（md，为何多此一举））</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">60000</span>        intervals<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> c<span class="token punctuation">:</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> L <span class="token keyword">in</span> intervals<span class="token punctuation">:</span>            <span class="token keyword">if</span> L<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> right<span class="token punctuation">:</span>                 sum <span class="token operator">+=</span> <span class="token number">1</span>                 right <span class="token operator">=</span> L<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span> <span class="token operator">-</span> sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="452-用最少数量的箭引爆气球"><a href="#452-用最少数量的箭引爆气球" class="headerlink" title="452. 用最少数量的箭引爆气球"></a>452. 用最少数量的箭引爆气球</h4><p><a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/">leetcode</a></p><p>难度: <code>中等</code></p><p>这题的解法其实和上一题435不能说一模一样，只能说完全一致。</p><blockquote><p>输入：points &#x3D; [[10,16],[2,8],[1,6],[7,12]]<br>输出：2<br>解释：气球可以用2支箭来爆破:<br>-在x &#x3D; 6处射出箭，击破气球[2,8]和[1,6]。<br>-在x &#x3D; 11处发射箭，击破气球[10,16]和[7,12]。</p></blockquote><h5 id="贪心题解-2"><a href="#贪心题解-2" class="headerlink" title="贪心题解"></a>贪心题解</h5><p>具体思路略。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMinArrowShots</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        points<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span> <span class="token keyword">lambda</span> c<span class="token punctuation">:</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        right <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> points<span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> right<span class="token punctuation">:</span>                right <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                sum <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="406-根据身高重建队列"><a href="#406-根据身高重建队列" class="headerlink" title="406. 根据身高重建队列"></a>406. 根据身高重建队列</h4><p><a href="https://leetcode-cn.com/problems/queue-reconstruction-by-height/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>这题还是有一定思考难度的，看了题解才知道咋做的（其实我也忘了自己有没有看题解……）<br>反正是个脑筋急转弯。</p><p>套路：一般这种数对，还涉及排序的，根据第一个元素正向排序，根据第二个元素反向排序，或者根据第一个元素反向排序，根据第二个元素正向排序，往往能够简化解题过程。</p><blockquote><p>输入：people &#x3D; [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]<br>输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]<br>解释：<br>编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。<br>编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。<br>编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。<br>编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。<br>编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。<br>编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。<br>因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队</p></blockquote><h5 id="贪心题解-3"><a href="#贪心题解-3" class="headerlink" title="贪心题解"></a>贪心题解</h5><p>具体思路如下：</p><p>假设有打乱顺序 意味着原始的数组满足排序</p><ul><li>第一个数字，第一优先级排序，由高到低，是为了用下标就能表示前面有几个元素比当前元素 大于等于</li><li>第二个数字，第二优先级排序，由低到高，当身高一样的时候，人数少的就应该放前面（正确性保障）<br>先安排身高最高且前面人最少的站好。<br>然后从左到右依次插入，插入位置为其第2项，即有多少人在他前面。<br>[[7, 0], [7, 1], [6, 1], [5, 0], [5, 2], [4, 4]]</li></ul><p>[7, 0]<br>[7, 0], [7, 1]<br>[7, 0], [6, 1], [7, 1],<br>[5, 0], [7, 0], [7, 1], [6, 1]<br>[5, 0], [7, 0], [5, 2], [7, 1], [6, 1]<br>[5, 0], [7, 0], [5, 2], [6, 1], [4, 4], [7, 1]</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reconstructQueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> people<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        people<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> c <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> people <span class="token punctuation">:</span>            res<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a>121. 买卖股票的最佳时机</h4><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/description/">leetcode</a></p><p>难度: <code>简单</code></p><p>炒股？那必然贪心！别人恐惧我贪婪，别人贪婪我恐惧！<br>动态规划其实也算是贪心吧？！</p><blockquote><p>输入：[7,1,5,3,6,4]<br>输出：5<br>解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。<br>     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</p></blockquote><h5 id="贪心题解-4"><a href="#贪心题解-4" class="headerlink" title="贪心题解"></a>贪心题解</h5><p>具体思路如下：<br>总的老说，就是找到最低价和最高价（当然最低价要在最高价前面）。<br>所以我们要遍历所有节点，记录当前节点时我们可以得到的最大收益。<br>如何计算呢？</p><ul><li>当前最大收益 &#x3D; max(已知最大收益, 当前价 - 前面已被记录的最低价)<br>over.</li></ul><img src="/2022/02/11/leetcode/tan-xin-si-xiang/1.gif" class="" title="给个别人做的图吧"><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        mip <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> p <span class="token operator">&lt;</span> mip <span class="token punctuation">:</span>                mip <span class="token operator">=</span> p            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span>p<span class="token operator">-</span>mip<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a>122. 买卖股票的最佳时机 II</h4><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>上一题的升级版！别人恐惧我贪婪，别人贪婪我恐惧！</p><p><code>note：你在任何时候 最多 只能持有 一股 股票。你也可以购买它，然后在 同一天 出售。</code></p><blockquote><p>输入: prices &#x3D; [7,1,5,3,6,4]<br>输出: 7<br>解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。<br>     随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6-3 &#x3D; 3 。</p></blockquote><h5 id="贪心题解-5"><a href="#贪心题解-5" class="headerlink" title="贪心题解"></a>贪心题解</h5><p>具体思路如下：<br>尽量的频繁交易，第一天买第二天就卖，不能拖！当然这是要建立在第二天价格高于第一天的前提下。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        tmp <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> prices<span class="token punctuation">:</span>            <span class="token keyword">if</span> p <span class="token operator">></span> tmp<span class="token punctuation">:</span>                res <span class="token operator">+=</span> p <span class="token operator">-</span> tmp            tmp <span class="token operator">=</span> p        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="605-种花问题"><a href="#605-种花问题" class="headerlink" title="605. 种花问题"></a>605. 种花问题</h4><p><a href="https://leetcode-cn.com/problems/can-place-flowers/description/">leetcode</a></p><p>难度: <code>简单</code></p><p>跳格子！</p><blockquote><p>输入：flowerbed &#x3D; [1,0,0,0,1], n &#x3D; 1<br>输出：true</p></blockquote><h5 id="贪心题解-6"><a href="#贪心题解-6" class="headerlink" title="贪心题解"></a>贪心题解</h5><p>具体思路如下：<br>能种就种。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canPlaceFlowers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flowerbed<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        l <span class="token operator">=</span> len<span class="token punctuation">(</span>flowerbed<span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>flowerbed<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> flowerbed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> l <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> flowerbed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> flowerbed<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> l <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">and</span> flowerbed<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> flowerbed<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">and</span> flowerbed<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> res<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="665-非递减数列"><a href="#665-非递减数列" class="headerlink" title="665. 非递减数列"></a>665. 非递减数列</h4><p><a href="https://leetcode-cn.com/problems/non-decreasing-array/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>我发现贪心思想都有点脑筋急转弯~</p><blockquote><p>输入: nums &#x3D; [4,2,3]<br>输出: true<br>解释: 你可以通过把第一个 4 变成 1 来使得它成为一个非递减数列。</p></blockquote><h5 id="贪心题解-7"><a href="#贪心题解-7" class="headerlink" title="贪心题解"></a>贪心题解</h5><p>具体思路如下：<br>本题是要维持一个非递减的数列，所以遇到递减的情况时（nums[i] &gt; nums[i + 1]），要么将前面的元素缩小，要么将后面的元素放大。</p><p>但是本题唯一的易错点就在这:</p><ul><li>如果将nums[i]缩小，可能会导致其无法融入前面已经遍历过的非递减子数列；</li><li>如果将nums[i + 1]放大，可能会导致其后续的继续出现递减；<br>所以要采取贪心的策略，在遍历时，每次需要看连续的三个元素，也就是瞻前顾后，遵循以下两个原则：</li><li>需要尽可能不放大nums[i + 1]，这样会让后续非递减更困难；</li><li>如果缩小nums[i]，但不破坏前面的子序列的非递减性；</li></ul><p>算法步骤：</p><ul><li>遍历数组，如果遇到递减：<ul><li>还能修改：<ul><li>修改方案1：将nums[i]缩小至nums[i + 1]；</li><li>修改方案2：将nums[i + 1]放大至nums[i]；</li></ul></li><li>不能修改了：直接返回false；</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkPossibility</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                cnt <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> cnt <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                 <span class="token keyword">else</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a>53. 最大子数组和</h4><p><a href="https://leetcode-cn.com/problems/maximum-subarray/description/">leetcode</a></p><p>难度: <code>简单</code></p><p>此简单非彼简单，动态规划就行了。</p><blockquote><p>输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</p></blockquote><h5 id="贪心题解-8"><a href="#贪心题解-8" class="headerlink" title="贪心题解"></a>贪心题解</h5><p>具体思路如下：<br>重点在<code>nums[i] += max(nums[i-1], 0)</code><br>要么nums[i] &#x3D; nums[i] + nums[i-1] 前一项大于0，能让他变大<br>要么nums[i] &#x3D; nums[i] 前一项不大于0，不能让他变大</p><table><thead><tr><th align="center">遍历序号</th><th align="center">nums</th><th align="center">res</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">[-2, 1, -3, 4, -1, 2, 1, -5, 4]</td><td align="center">-2</td></tr><tr><td align="center">1</td><td align="center">[-2, 1, -3, 4, -1, 2, 1, -5, 4]</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">[-2, 1, -2, 4, -1, 2, 1, -5, 4]</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">[-2, 1, -2, 4, -1, 2, 1, -5, 4]</td><td align="center">4</td></tr><tr><td align="center">4</td><td align="center">[-2, 1, -2, 4, 3, 2, 1, -5, 4]</td><td align="center">4</td></tr><tr><td align="center">5</td><td align="center">[-2, 1, -2, 4, 3, 5, 1, -5, 4]</td><td align="center">5</td></tr><tr><td align="center">6</td><td align="center">[-2, 1, -2, 4, 3, 5, 6, -5, 4]</td><td align="center">6</td></tr><tr><td align="center">7</td><td align="center">[-2, 1, -2, 4, 3, 5, 6, 1, 4]</td><td align="center">6</td></tr><tr><td align="center">8</td><td align="center">[-2, 1, -2, 4, 3, 5, 6, 1, 5]</td><td align="center">6</td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> res<span class="token punctuation">:</span>                res <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a>763. 划分字母区间</h4><p><a href="https://leetcode-cn.com/problems/partition-labels/description/">leetcode</a></p><p>难度: <code>中等</code></p><p>有一说一，贪心思想真的绕弯弯！！！</p><blockquote><p>输入：S &#x3D; “ababcbacadefegdehijhklij”<br>输出：[9,7,8]<br>解释：<br>划分结果为 “ababcbaca”, “defegde”, “hijhklij”。<br>每个字母最多出现在一个片段中。<br>像 “ababcbacadefegde”, “hijhklij” 的划分是错误的，因为划分的片段数较少。</p></blockquote><h5 id="贪心题解-9"><a href="#贪心题解-9" class="headerlink" title="贪心题解"></a>贪心题解</h5><p>具体思路如下：<br>首先呢，用字典记录所有出现字母的<code>出现位置start</code>和<code>消失位置end</code><br>然后呢，把所有的[start, end]组成一个新数组[[start0, end0], [start1, end1], …, [startN, endN]]，不用特意去排序，因为上一步找出来的[start, end]本来就是按start从小到大排序的<br>再后呢，开始遍历了，如果当前节点的start_i落在了前一个节点的[start_i-1, end_i-1]里面，就说明两个点重叠了，一旦发现这个条件不成立，就将<code>end - start + 1</code>加入结果，然后更新start和end。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partitionLabels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        hmpend <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>        hmpstart <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> hmpstart<span class="token punctuation">:</span>                hmpstart<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i            hmpend<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        dlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> hmpstart<span class="token punctuation">:</span>            dlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>hmpstart<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>hmpend<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># dlist.sort(key=lambda c:(c[0],c[1])) # 其实并不需要排序</span>        start <span class="token operator">=</span> <span class="token number">0</span>        end <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> dl <span class="token keyword">in</span> dlist<span class="token punctuation">:</span>            <span class="token keyword">if</span> start <span class="token operator">&lt;=</span> dl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> dl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> end<span class="token punctuation">:</span>                end <span class="token operator">=</span> max<span class="token punctuation">(</span>end<span class="token punctuation">,</span> dl<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                start <span class="token operator">=</span> dl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                end <span class="token operator">=</span> dl<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心思想 </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
